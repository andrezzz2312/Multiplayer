[manifest]
version = "1.0.0"
dump_lua = true
priority = 2147483600

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''function SMODS.in_scoring(card, scoring_hand)'''
position = 'after'
payload = '''   if not scoring_hand then return false end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "for _, area in ipairs(SMODS.get_card_areas('playing_cards')) do"
position = 'after'
payload = "if not area.cards then goto continue end"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = "function localize(args, misc_cat)"
position = 'after'
payload = '''
   if not args then return "ERROR" end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''engine/moveable.lua'''
pattern = "function Moveable:align_to_major()"
position = 'after'
payload = '''
if not self or not self.alignment or not self.role then return end
if not self.alignment.type or not self.alignment.prev_type then return end
if not self.alignment.offset or not self.alignment.prev_offset then return end
if not self.alignment.offset.x or not self.alignment.offset.y then return end
if not self.alignment.prev_offset.x or not self.alignment.prev_offset.y then return end
if not self.T then return end
if not self.Mid or not self.Mid.T or not self.Mid.T.w or not self.Mid.T.h or not self.Mid.T.x or not self.Mid.T.y then return end
if not self.role.major or not self.role.major.T then return end
if not self.role.major.T.w or not self.role.major.T.h or not self.role.major.T.x or not self.role.major.T.y then return end
if not self.T.w or not self.T.h or not self.T.x or not self.T.y then return end
if not self.role.offset then self.role.offset = {} end'''
match_indent = true
times = 1

# remove collection misprint when in multiplayer
# code restructured from "no peeking" by spad_overolls
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'for i = self.ability.extra.min, self.ability.extra.max do'
position = "before"
payload = '''
local mp_collection = self.area.config.type == "title" and MP.LOBBY.code
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''{string = 'rand()', colour = G.C.JOKER_GREY},{string = "#@"..(G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.id or 11)..(G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.suit:sub(1,1) or 'D'), colour = G.C.RED},'''
position = "at"
payload = '''{string = 'rand()', colour = G.C.JOKER_GREY},{string = "#@"..(mp_collection and 'NOPE' or G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.id or 11)..(mp_collection and '' or G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.suit:sub(1,1) or 'D'), colour = G.C.RED},'''
match_indent = true

# this seed is passed through a billion functions, and never global scoped
# just give it to us
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = 'self.GAME.selected_back_key = selected_back'
position = "after"
payload = '''
G._MP_SET_SEED = args.seed
'''
match_indent = true

# there's no other way to do ante scaling in challenges other than patching lol
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''elseif v.value then'''
position = "before"
payload = '''
elseif v.id == 'mp_ante_scaling' then
	self.GAME.starting_params.ante_scaling = v.value'''
match_indent = true

# relevant only for small world
[[patches]]
[patches.pattern]
target = "back.lua"
pattern = '''local card = create_card('Tarot', G.consumeables, nil, nil, nil, nil, v, 'deck')'''
position = "at"
payload = '''local card = create_card(MP.legacy_smallworld() and 'Tarot' or G.P_CENTERS[v].set, G.consumeables, nil, nil, nil, nil, v, 'deck')'''
match_indent = true

# STEAMODDED BUG - fix seeing double
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
for i = 1, #hand do
	if not SMODS.has_any_suit(hand[i]) then
		for k, v in pairs(suit_tally) do
			if hand[i]:is_suit(k) then suit_tally[k] = suit_tally[k] + 1 end
		end
	elseif SMODS.has_any_suit(hand[i]) then
		if hand[i]:is_suit('Clubs') and suit_tally["Clubs"] == 0 then suit_tally["Clubs"] = suit_tally["Clubs"] + 1
		elseif hand[i]:is_suit('Diamonds') and suit_tally["Diamonds"] == 0  then suit_tally["Diamonds"] = suit_tally["Diamonds"] + 1
		elseif hand[i]:is_suit('Spades') and suit_tally["Spades"] == 0  then suit_tally["Spades"] = suit_tally["Spades"] + 1
		elseif hand[i]:is_suit('Hearts') and suit_tally["Hearts"] == 0  then suit_tally["Hearts"] = suit_tally["Hearts"] + 1 end
		for k, v in pairs(suit_tally) do
			if k ~= "Clubs" and k ~= "Diamonds" and k ~= "Hearts" and k ~= "Spades" then
				if hand[i]:is_suit(k) and suit_tally[k] == 0  then suit_tally[k] = suit_tally[k] + 1 end
			end
		end
	end
end'''
position = "at"
payload = '''
for i = 1, #hand do
	if not SMODS.has_any_suit(hand[i]) then
		for k, v in pairs(suit_tally) do
			if hand[i]:is_suit(k) then suit_tally[k] = suit_tally[k] + 1 end
		end
	end
end
for i = 1, #hand do
	if SMODS.has_any_suit(hand[i]) then
		if hand[i]:is_suit('Clubs') and suit_tally["Clubs"] == 0 then suit_tally["Clubs"] = suit_tally["Clubs"] + 1
		elseif hand[i]:is_suit('Diamonds') and suit_tally["Diamonds"] == 0  then suit_tally["Diamonds"] = suit_tally["Diamonds"] + 1
		elseif hand[i]:is_suit('Spades') and suit_tally["Spades"] == 0  then suit_tally["Spades"] = suit_tally["Spades"] + 1
		elseif hand[i]:is_suit('Hearts') and suit_tally["Hearts"] == 0  then suit_tally["Hearts"] = suit_tally["Hearts"] + 1 end
		for k, v in pairs(suit_tally) do
			if k ~= "Clubs" and k ~= "Diamonds" and k ~= "Hearts" and k ~= "Spades" then
				if hand[i]:is_suit(k) and suit_tally[k] == 0  then suit_tally[k] = suit_tally[k] + 1 end
			end
		end
	end
end'''
match_indent = true

# i was the one who pred this line, i guess it became a problem
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''if G.SETTINGS.paused and key ~= 'to_do' then return math.random() end'''
position = "at"
payload = '''
-- disabled by Multiplayer because of voucher rng calls while paused 
-- if G.SETTINGS.paused and key ~= 'to_do' then return math.random() end
'''
match_indent = true